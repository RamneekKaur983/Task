import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Scanner;



public class Task {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner s = new Scanner(System.in);
		
		
		// uncomment this line to input the values
		//int n=s.nextInt();
		//HashMap<String, Integer> map =input(n);
		
		HashMap<String, Integer> map =unitTest1();
		
		//uncomment this to try unitTest2
		//HashMap<String, Integer> map =unitTest2();
		
		HashMap<String, Integer> answer=solution(map);
	
		LinkedHashMap<String, Integer> finalanswer= new LinkedHashMap<>();
		finalanswer.put(findDay(1), answer.get(findDay(1)));
		for(int i=2;i<=6;i++)
		{
			
			if(answer.containsKey(findDay(i)))
			{
			
				finalanswer.put(findDay(i), answer.get(findDay(i)));
			}
			else
			{
				
				int temp1=i-1;
				while(temp1>=0&&!answer.containsKey(findDay(temp1)) )
				{
					temp1--;
				}
				int temp2=(i+1)%7;
				while(temp2<7 && !answer.containsKey(findDay(temp2)))
				{
					temp2++;
					temp2%=7;
				}
				
				String prev=findDay(temp1);
				String next=findDay(temp2);
				
				
				int x=Math.abs(answer.get(prev)-answer.get(next));
				int y=Math.abs(temp1-temp2);
				int temp3=x/y;
				if(answer.get(prev)<answer.get(next))
				{
					finalanswer.put(findDay(temp1+1), answer.get(prev)+temp3);
					answer.put(findDay(temp1+1), answer.get(prev)+temp3);
				}
				else if(answer.get(prev)==answer.get(next))
				{
					finalanswer.put(findDay(temp1+1), answer.get(prev));
					answer.put(findDay(temp1+1), answer.get(prev));
				}
				else
					
				{
					finalanswer.put(findDay(temp1+1), answer.get(prev)-temp3);
					answer.put(findDay(temp1+1), answer.get(prev)-temp3);
				}

				
			}
			
			
		}
		finalanswer.put(findDay(0), answer.get(findDay(0)));
		for(String key: finalanswer.keySet())
		{
			System.out.print(key+" ");
			System.out.println(finalanswer.get(key));
		}
		
		

	}
	public static HashMap<String, Integer> unitTest1() {
		
		HashMap<String, Integer> map= new HashMap<>();
		map.put("2020-01-01", 4);
		map.put("2020-01-02", 4);
		map.put("2020-01-03", 6);
		map.put("2020-01-04", 8);
		map.put("2020-01-05", 2);
		map.put("2020-01-06", -6);
		map.put("2020-01-07", 2);
		map.put("2020-01-08", -2);
		return map;
		
		
	}
	public static HashMap<String , Integer> unitTest2()
	{
		HashMap<String, Integer> map = new HashMap<>();
		map.put("2020-01-01", 6);
		map.put("2020-01-04", 12);
		map.put("2020-01-05", 14);
		map.put("2020-01-06", 2);
		map.put("2020-01-07", 4);
		return map;
		
	}
	public static HashMap<String, Integer> input(int n)
	{
		Scanner s = new Scanner(System.in);
		HashMap<String, Integer> map = new HashMap<>();
		for(int i=0;i<n;i++)
		{
			String str=s.next();
			int num=s.nextInt();
			map.put(str, num);
		}
		return map;
	}
	public static int MonthCode(int  year , int month)
	{
		switch(month)
		{
		
		case 1 : if(year%4==0)
		{
			return 6;
		}
		else
		{
			return 0;
		}
		case 2:
			if(year%4==0)
			{
				return 2;
			}
			else
			{
				return 3;
			}
		case 3: return 3;
		case 4: return 6;
		case 5:return 1;
		case 6:return 4;
		case 7:return 6;
		case 8:return 2;
		case 9:return 5;
		case 10:return 0;
		case 11:return 3;
		case 12:return 5;
		default:
			return -1;
		
		}
		
		
	}
	public static String findDay(int num)
	{
		switch(num)
		{
			case 1 : return "Monday";
			case 2: return "Tuesday";
			case 3: return "Wednesday";
			case 4: return "Thursday";
			case 5: return "Friday";
			case 6: return "Saturday";
			case 0 : return "Sunday";
			default: return "None";
		}
	}
	public static HashMap<String, Integer>  solution(HashMap<String, Integer> map)
	{
		HashMap<String, Integer> answer= new HashMap<>();
		for(String date: map.keySet())
		{
			String arr[]= date.split("-");
			int year=Integer.parseInt(arr[0]);
			int month=Integer.parseInt(arr[1]);
			int numdate=Integer.parseInt(arr[2]);
			
			
			int monthCode=MonthCode(year, month);
			if(year<=1999)
			{
				int lastTwo=year%100;

				
				int added= lastTwo+(lastTwo/4)+monthCode+numdate;
				added=added%7;
				
				String day=findDay(added);
				if(!answer.containsKey(day))
				{
					answer.put(day, map.get(date));
				}
				else
				{
					answer.put(day, answer.get(day)+map.get(date));
				}
			}
			if(year>=200)
			{
				int lastThree=year%1000;
				if(lastThree<100)
				{
					lastThree+=100;
					
					int added =lastThree+(lastThree/4)+monthCode+numdate;
					added%=7;
					String day=findDay(added);
					if(!answer.containsKey(day))
					{
						answer.put(day, map.get(date));
					}
					else
					{
						answer.put(day, answer.get(day)+map.get(date));
					}
					
					
				}
			}
			
		}
		return answer;
		
	}
	

	
}
